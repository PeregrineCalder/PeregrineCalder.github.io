<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Distributed Systems - Theoretical Foundations</title>
    <url>/2024/01/19/Distributed_Systems_Theoretical_Foundations/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><h3 id="What-is-a-Distributed-System"><a href="#What-is-a-Distributed-System" class="headerlink" title="What is a Distributed System?"></a>What is a Distributed System?</h3><p>分布式系统是一个硬件或软件组件分布在不同网络计算机上，彼此之间通过消息传递进行通信和协调的系统。即<strong>一群独立计算机集合共同对外提供服务，给系统用户仅有一台计算机在提供服务的感知</strong>。</p>
<p>分布式意味着可以采用更多的普通计算机（相对于昂贵的大型机）组成分布式集群对外提供服务。计算机越多，CPU、内存、存储资源等也就越多，能够处理的并发访问量也就越大。</p>
<p>由于各个主机之间通信和协调主要通过网络进行，分布式系统中的计算机在空间上几乎没有任何限制，对于大型网站各个主机甚至可能分布在不同的国家和地区。</p>
<h3 id="分布式系统的主要特征"><a href="#分布式系统的主要特征" class="headerlink" title="分布式系统的主要特征"></a>分布式系统的主要特征</h3><ul>
<li><p><strong>分布性:</strong> 分布式系统中的多台计算机之间在空间位置上可以随意分布。</p>
</li>
<li><p><strong>对等性:</strong>  分布式系统中的计算机没有主／从之分，即没有控制整个系统的主机，也没有被控制的从机，组成分布式系统的所有计算机节点都是对等的。</p>
<!-- 副本（Replica）是分布式系统常见概念之一，是分布式系统对数据和服务提供的一种冗余方式。在常见的分布式系统中，为了对外提供高可用的服务，往往会对数据和服务进行副本处理。数据副本是指在不同节点上持久化同一份数据，当某一个节点上存储的数据丢失时，可以从副本读取该数据，这是解决分布式系统数据丢失问题最为有效的手段。另一类副本是服务副本，指多个节点提供同样的服务，每个节点都有能力接收来自外部的请求并进行相应的处理。-->
</li>
<li><p><strong>自治性:</strong> 分布式系统中的各个节点都包含自己的处理机和内存，各自具有独立的处理数据的功能，彼此无主次之分，既能自治地进行工作，又能利用共享的通信线路来传送信息，协调任务处理。</p>
</li>
<li><p><strong>并发性:</strong> 在一个计算机网络中，同一个分布式系统中的多个节点在程序运行过程，可能会并发操作一些共享资源。</p>
</li>
</ul>
<h3 id="分布式系统面临的问题"><a href="#分布式系统面临的问题" class="headerlink" title="分布式系统面临的问题"></a>分布式系统面临的问题</h3><ul>
<li><p><strong>机器宕机</strong></p>
</li>
<li><p><strong>网络异常</strong></p>
<ul>
<li><strong>消息丢失:</strong> 节点彼此之间完全无法通信，即出现了“网络分化”。</li>
<li><strong>消息乱序:</strong> 节点通信过程中有一定概率不是按照发送时的顺序依次到达目的节点，考虑使用序列号等机制处理网络消息的乱序问题，使得无效的、过期的网络消息不影响系统的正确性。</li>
<li><strong>数据错误:</strong> TCP 协议为应用层提供了可靠的、面向连接的传输服务，但在分布式系统的协议设计中不能认为所有基于 TCP 协议的网络通信都是可靠的。TCP协议只能保证同一个 TCP 链接内的网络消息不乱序，TCP 链接之间的网络消息顺序则无法保证。</li>
</ul>
</li>
<li><p><strong>缺乏全局时钟:</strong> 在分布式系统中，由于系统缺乏一个全局的时钟序列控制，难以确定事件的先后顺序。</p>
</li>
<li><p><strong>分布式三态:</strong> 如果某个节点向另一个节点发起 <strong>RPC(Remote procedure call)</strong> 调用，即某个节点 A 向另一个节点 B 发送消息，节点 B 根据收到消息的内容完成某些操作，并将操作的结果通过另一个消息返回给节点 A，那么这个RPC 执行的结果有三种状态：<strong>“成功”</strong>、<strong>“失败”</strong>、<strong>“超时 (未知)”</strong>，称之为分布式系统的三态。</p>
</li>
<li><p><strong>存储数据丢失:</strong> 对于有状态节点来说，数据丢失意味着状态丢失，通常只能从其他节点读取、恢复存储状态。</p>
</li>
</ul>
<h3 id="衡量分布式系统的指标"><a href="#衡量分布式系统的指标" class="headerlink" title="衡量分布式系统的指标"></a>衡量分布式系统的指标</h3><ul>
<li><p><strong>性能</strong></p>
<ul>
<li><strong>吞吐量:</strong> 通常用系统每秒处理的总数据量来衡量系统在某一段时间内可以处理的数据总量</li>
<li><strong>响应延迟:</strong> 系统完成某一功能需要使用的时间</li>
<li><strong>并发量:</strong> 通常用 <strong>QPS(query per second)</strong> 来衡量系统同时完成某一功能的能力</li>
</ul>
</li>
<li><p><strong>可用性 (availability):</strong> 指系统在面对各种异常时可以正确提供服务的能力，可以用系统的停止服务时间与正常服务时间的比例来衡量，也可以用某功能的失败次数与成功次数的比例来衡量，可用性是分布式的重要指标，衡量了系统的鲁棒性，是系统容错能力的体现。</p>
</li>
<li><p><strong>可扩展性 (scalability):</strong> 指分布式系统通过扩展集群机器规模提高系统性能（吞吐、延迟、并发）、存储容量、计算能力的特性。优秀的分布式系统追求“线性扩展性”，即系统的某一指标可以随着集群中机器的数量线性增长。</p>
</li>
<li><p><strong>一致性:</strong> 分布式系统为了提高可用性，不可避免会使用副本机制，从而引发副本一致性问题。</p>
</li>
</ul>
<h2 id="Fundamental-Theory"><a href="#Fundamental-Theory" class="headerlink" title="Fundamental Theory"></a>Fundamental Theory</h2><h3 id="CAP-theorem"><a href="#CAP-theorem" class="headerlink" title="CAP theorem"></a>CAP theorem</h3><ul>
<li><strong>Consistency (一致性):</strong> <em>Every read receives the most recent write or an error.</em></li>
<li><strong>Availability (可用性):</strong> <em>Every request receives a (non-error) response, without guaranteeing it contains the most recent write.</em></li>
<li><strong>Partition Tolerance (分区容错):</strong> <em>The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes.</em>  <!-- 大多数分布式系统分布在多个子网络，每个子网络就叫做一个区（partition），分区容错指的是当区间通信失败时系统仍能正常工作 --></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../img/DistributedSystems/TheoreticalFoundations/CAP.png"
                      alt="CAP Theorem Diagram"
                ></p>
<h3 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h3><ul>
<li><strong>Basically Available (基本可用):</strong> 分布式系统在出现不可预知故障的时候，允许损失部分可用性。</li>
<li><strong>Soft State (软状态):</strong> 又称弱状态，指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。</li>
<li><strong>Eventually Consistent (最终一致性):</strong> 强调系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一致，即无需实时保证系统数据的强一致性。</li>
</ul>
]]></content>
      <categories>
        <category>Distributed Systems</category>
      </categories>
      <tags>
        <tag>Distributed Systems</tag>
      </tags>
  </entry>
</search>
